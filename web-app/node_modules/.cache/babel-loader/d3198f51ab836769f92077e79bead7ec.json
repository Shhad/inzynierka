{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n/* tslint:enable:max-line-length */\n\n/**\r\n *\r\n * Errors if Observable does not emit a value in given time span, in case of which\r\n * subscribes to the second Observable.\r\n *\r\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\r\n *\r\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\r\n *\r\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\r\n * still accepting as a first argument either a number or a Date, which control - respectively -\r\n * when values of source Observable should be emitted or when it should complete.\r\n *\r\n * The only difference is that it accepts a second, required parameter. This parameter\r\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\r\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\r\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\r\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\r\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\r\n * stream completes, it completes as well.\r\n *\r\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\r\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\r\n * as a consequence - when second Observable will be subscribed, since subscription happens\r\n * immediately after failing check.\r\n *\r\n * @example <caption>Add fallback observable</caption>\r\n * const seconds = Rx.Observable.interval(1000);\r\n * const minutes = Rx.Observable.interval(60 * 1000);\r\n *\r\n * seconds.timeoutWith(900, minutes)\r\n *     .subscribe(\r\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\r\n *                                      // since first value of `seconds` will not arrive fast enough.\r\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\r\n *                                 // but here will never be called.\r\n *     );\r\n *\r\n * @param {number|Date} due Number specifying period within which Observable must emit values\r\n *                          or Date specifying before when Observable should complete\r\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\r\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\r\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\r\n *                          passed as a second parameter.\r\n * @method timeoutWith\r\n * @owner Observable\r\n */\n\n\nfunction timeoutWith(due, withObservable, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = rxjs_1.asyncScheduler;\n  }\n\n  return operators_1.timeoutWith(due, withObservable, scheduler)(this);\n}\n\nexports.timeoutWith = timeoutWith;","map":null,"metadata":{},"sourceType":"script"}