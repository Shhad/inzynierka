{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar operators_1 = require(\"rxjs/operators\");\n/* tslint:enable:max-line-length */\n\n/**\r\n * Combines the source Observable with other Observables to create an Observable\r\n * whose values are calculated from the latest values of each, only when the\r\n * source emits.\r\n *\r\n * <span class=\"informal\">Whenever the source Observable emits a value, it\r\n * computes a formula using that value plus the latest values from other input\r\n * Observables, then emits the output of that formula.</span>\r\n *\r\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\r\n *\r\n * `withLatestFrom` combines each value from the source Observable (the\r\n * instance) with the latest values from the other input Observables only when\r\n * the source emits a value, optionally using a `project` function to determine\r\n * the value to be emitted on the output Observable. All input Observables must\r\n * emit at least one value before the output Observable will emit a value.\r\n *\r\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var timer = Rx.Observable.interval(1000);\r\n * var result = clicks.withLatestFrom(timer);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link combineLatest}\r\n *\r\n * @param {ObservableInput} other An input Observable to combine with the source\r\n * Observable. More than one input Observables may be given as argument.\r\n * @param {Function} [project] Projection function for combining values\r\n * together. Receives all values in order of the Observables passed, where the\r\n * first parameter is a value from the source Observable. (e.g.\r\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\r\n * passed, arrays will be emitted on the output Observable.\r\n * @return {Observable} An Observable of projected values from the most recent\r\n * values from each input Observable, or an array of the most recent values from\r\n * each input Observable.\r\n * @method withLatestFrom\r\n * @owner Observable\r\n */\n\n\nfunction withLatestFrom() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return operators_1.withLatestFrom.apply(void 0, args)(this);\n}\n\nexports.withLatestFrom = withLatestFrom;","map":null,"metadata":{},"sourceType":"script"}