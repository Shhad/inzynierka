{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar operators_1 = require(\"rxjs/operators\");\n/* tslint:enable:max-line-length */\n\n/**\r\n * Groups the items emitted by an Observable according to a specified criterion,\r\n * and emits these grouped items as `GroupedObservables`, one\r\n * {@link GroupedObservable} per group.\r\n *\r\n * <img src=\"./img/groupBy.png\" width=\"100%\">\r\n *\r\n * @example <caption>Group objects by id and return as array</caption>\r\n * Observable.of<Obj>({id: 1, name: 'aze1'},\r\n *                    {id: 2, name: 'sf2'},\r\n *                    {id: 2, name: 'dg2'},\r\n *                    {id: 1, name: 'erg1'},\r\n *                    {id: 1, name: 'df1'},\r\n *                    {id: 2, name: 'sfqfb2'},\r\n *                    {id: 3, name: 'qfs3'},\r\n *                    {id: 2, name: 'qsgqsfg2'}\r\n *     )\r\n *     .groupBy(p => p.id)\r\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\r\n *     .subscribe(p => console.log(p));\r\n *\r\n * // displays:\r\n * // [ { id: 1, name: 'aze1' },\r\n * //   { id: 1, name: 'erg1' },\r\n * //   { id: 1, name: 'df1' } ]\r\n * //\r\n * // [ { id: 2, name: 'sf2' },\r\n * //   { id: 2, name: 'dg2' },\r\n * //   { id: 2, name: 'sfqfb2' },\r\n * //   { id: 2, name: 'qsgqsfg2' } ]\r\n * //\r\n * // [ { id: 3, name: 'qfs3' } ]\r\n *\r\n * @example <caption>Pivot data on the id field</caption>\r\n * Observable.of<Obj>({id: 1, name: 'aze1'},\r\n *                    {id: 2, name: 'sf2'},\r\n *                    {id: 2, name: 'dg2'},\r\n *                    {id: 1, name: 'erg1'},\r\n *                    {id: 1, name: 'df1'},\r\n *                    {id: 2, name: 'sfqfb2'},\r\n *                    {id: 3, name: 'qfs1'},\r\n *                    {id: 2, name: 'qsgqsfg2'}\r\n *                   )\r\n *     .groupBy(p => p.id, p => p.name)\r\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\r\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\r\n *     .subscribe(p => console.log(p));\r\n *\r\n * // displays:\r\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\r\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\r\n * // { id: 3, values: [ 'qfs1' ] }\r\n *\r\n * @param {function(value: T): K} keySelector A function that extracts the key\r\n * for each item.\r\n * @param {function(value: T): R} [elementSelector] A function that extracts the\r\n * return element for each item.\r\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\r\n * A function that returns an Observable to determine how long each group should\r\n * exist.\r\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\r\n * GroupedObservables, each of which corresponds to a unique key value and each\r\n * of which emits those items from the source Observable that share that key\r\n * value.\r\n * @method groupBy\r\n * @owner Observable\r\n */\n\n\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return operators_1.groupBy(keySelector, elementSelector, durationSelector, subjectSelector)(this);\n}\n\nexports.groupBy = groupBy;","map":null,"metadata":{},"sourceType":"script"}