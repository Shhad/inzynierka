{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar operators_1 = require(\"rxjs/operators\");\n/**\r\n * Represents all of the notifications from the source Observable as `next`\r\n * emissions marked with their original types within {@link Notification}\r\n * objects.\r\n *\r\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\r\n * {@link Notification} objects, emitted as `next` on the output Observable.\r\n * </span>\r\n *\r\n * <img src=\"./img/materialize.png\" width=\"100%\">\r\n *\r\n * `materialize` returns an Observable that emits a `next` notification for each\r\n * `next`, `error`, or `complete` emission of the source Observable. When the\r\n * source Observable emits `complete`, the output Observable will emit `next` as\r\n * a Notification of type \"complete\", and then it will emit `complete` as well.\r\n * When the source Observable emits `error`, the output will emit `next` as a\r\n * Notification of type \"error\", and then `complete`.\r\n *\r\n * This operator is useful for producing metadata of the source Observable, to\r\n * be consumed as `next` emissions. Use it in conjunction with\r\n * {@link dematerialize}.\r\n *\r\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\r\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\r\n * var upperCase = letters.map(x => x.toUpperCase());\r\n * var materialized = upperCase.materialize();\r\n * materialized.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\r\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\r\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\r\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\r\n * //   [as project] (http://1â€¦, hasValue: false}\r\n *\r\n * @see {@link Notification}\r\n * @see {@link dematerialize}\r\n *\r\n * @return {Observable<Notification<T>>} An Observable that emits\r\n * {@link Notification} objects that wrap the original emissions from the source\r\n * Observable with metadata.\r\n * @method materialize\r\n * @owner Observable\r\n */\n\n\nfunction materialize() {\n  return operators_1.materialize()(this);\n}\n\nexports.materialize = materialize;","map":null,"metadata":{},"sourceType":"script"}