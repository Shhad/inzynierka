{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar operators_1 = require(\"rxjs/operators\");\n/**\r\n * Converts a higher-order Observable into a first-order Observable by waiting\r\n * for the outer Observable to complete, then applying {@link combineLatest}.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\r\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\r\n *\r\n * <img src=\"./img/combineAll.png\" width=\"100%\">\r\n *\r\n * Takes an Observable of Observables, and collects all Observables from it.\r\n * Once the outer Observable completes, it subscribes to all collected\r\n * Observables and combines their values using the {@link combineLatest}\r\n * strategy, such that:\r\n * - Every time an inner Observable emits, the output Observable emits.\r\n * - When the returned observable emits, it emits all of the latest values by:\r\n *   - If a `project` function is provided, it is called with each recent value\r\n *     from each inner Observable in whatever order they arrived, and the result\r\n *     of the `project` function is what is emitted by the output Observable.\r\n *   - If there is no `project` function, an array of all of the most recent\r\n *     values is emitted by the output Observable.\r\n *\r\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var higherOrder = clicks.map(ev =>\r\n *   Rx.Observable.interval(Math.random()*2000).take(3)\r\n * ).take(2);\r\n * var result = higherOrder.combineAll();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link combineLatest}\r\n * @see {@link mergeAll}\r\n *\r\n * @param {function} [project] An optional function to map the most recent\r\n * values from each inner Observable into a new result. Takes each of the most\r\n * recent values from each collected inner Observable as arguments, in order.\r\n * @return {Observable} An Observable of projected results or arrays of recent\r\n * values.\r\n * @method combineAll\r\n * @owner Observable\r\n */\n\n\nfunction combineAll(project) {\n  return operators_1.combineAll(project)(this);\n}\n\nexports.combineAll = combineAll;","map":null,"metadata":{},"sourceType":"script"}