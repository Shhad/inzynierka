{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar operators_1 = require(\"rxjs/operators\");\n/**\r\n * Skip the last `count` values emitted by the source Observable.\r\n *\r\n * <img src=\"./img/skipLast.png\" width=\"100%\">\r\n *\r\n * `skipLast` returns an Observable that accumulates a queue with a length\r\n * enough to store the first `count` values. As more values are received,\r\n * values are taken from the front of the queue and produced on the result\r\n * sequence. This causes values to be delayed.\r\n *\r\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\r\n * var many = Rx.Observable.range(1, 5);\r\n * var skipLastTwo = many.skipLast(2);\r\n * skipLastTwo.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // 1 2 3\r\n *\r\n * @see {@link skip}\r\n * @see {@link skipUntil}\r\n * @see {@link skipWhile}\r\n * @see {@link take}\r\n *\r\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\r\n * ArgumentOutOrRangeError if `i < 0`.\r\n *\r\n * @param {number} count Number of elements to skip from the end of the source Observable.\r\n * @returns {Observable<T>} An Observable that skips the last count values\r\n * emitted by the source Observable.\r\n * @method skipLast\r\n * @owner Observable\r\n */\n\n\nfunction skipLast(count) {\n  return operators_1.skipLast(count)(this);\n}\n\nexports.skipLast = skipLast;","map":null,"metadata":{},"sourceType":"script"}