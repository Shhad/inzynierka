{"ast":null,"code":"var queue = [];\n/**\r\n  Variable to hold a counting semaphore\r\n  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not\r\n    already suspended)\r\n  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This\r\n    triggers flushing the queued tasks.\r\n**/\n\nvar semaphore = 0;\n/**\r\n  Executes a task 'atomically'. Tasks scheduled during this execution will be queued\r\n  and flushed after this task has finished (assuming the scheduler endup in a released\r\n  state).\r\n**/\n\nfunction exec(task) {\n  try {\n    suspend();\n    task();\n  } finally {\n    release();\n  }\n}\n/**\r\n  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)\r\n**/\n\n\nexport function asap(task) {\n  queue.push(task);\n\n  if (!semaphore) {\n    suspend();\n    flush();\n  }\n}\n/**\r\n  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the\r\n  scheduler is released.\r\n**/\n\nexport function suspend() {\n  semaphore++;\n}\n/**\r\n  Puts the scheduler in a `released` state.\r\n**/\n\nfunction release() {\n  semaphore--;\n}\n/**\r\n  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.\r\n**/\n\n\nexport function flush() {\n  release();\n  var task = void 0;\n\n  while (!semaphore && (task = queue.shift()) !== undefined) {\n    exec(task);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}