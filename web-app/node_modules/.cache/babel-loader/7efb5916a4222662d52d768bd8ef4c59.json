{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n/**\r\n * Ignores source values for `duration` milliseconds, then emits the most recent\r\n * value from the source Observable, then repeats this process.\r\n *\r\n * <span class=\"informal\">When it sees a source values, it ignores that plus\r\n * the next ones for `duration` milliseconds, and then it emits the most recent\r\n * value from the source.</span>\r\n *\r\n * <img src=\"./img/auditTime.png\" width=\"100%\">\r\n *\r\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\r\n * silenced time window, instead of the first value. `auditTime` emits the most\r\n * recent value from the source Observable on the output Observable as soon as\r\n * its internal timer becomes disabled, and ignores source values while the\r\n * timer is enabled. Initially, the timer is disabled. As soon as the first\r\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\r\n * the time unit determined internally by the optional `scheduler`) has passed,\r\n * the timer is disabled, then the most recent source value is emitted on the\r\n * output Observable, and this process repeats for the next source value.\r\n * Optionally takes a {@link IScheduler} for managing timers.\r\n *\r\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.auditTime(1000);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link audit}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sampleTime}\r\n * @see {@link throttleTime}\r\n *\r\n * @param {number} duration Time to wait before emitting the most recent source\r\n * value, measured in milliseconds or the time unit determined internally\r\n * by the optional `scheduler`.\r\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\r\n * managing the timers that handle the rate-limiting behavior.\r\n * @return {Observable<T>} An Observable that performs rate-limiting of\r\n * emissions from the source Observable.\r\n * @method auditTime\r\n * @owner Observable\r\n */\n\n\nfunction auditTime(duration, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = rxjs_1.asyncScheduler;\n  }\n\n  return operators_1.auditTime(duration, scheduler)(this);\n}\n\nexports.auditTime = auditTime;","map":null,"metadata":{},"sourceType":"script"}