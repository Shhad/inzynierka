{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\nexport function tap(nextOrObserver, error, complete) {\n  return function tapOperatorFunction(source) {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nvar DoOperator =\n/*@__PURE__*/\nfunction () {\n  function DoOperator(nextOrObserver, error, complete) {\n    this.nextOrObserver = nextOrObserver;\n    this.error = error;\n    this.complete = complete;\n  }\n\n  DoOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  };\n\n  return DoOperator;\n}();\n\nvar TapSubscriber =\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(TapSubscriber, _super);\n\n  function TapSubscriber(destination, observerOrNext, error, complete) {\n    var _this = _super.call(this, destination) || this;\n\n    _this._tapNext = noop;\n    _this._tapError = noop;\n    _this._tapComplete = noop;\n    _this._tapError = error || noop;\n    _this._tapComplete = complete || noop;\n\n    if (isFunction(observerOrNext)) {\n      _this._context = _this;\n      _this._tapNext = observerOrNext;\n    } else if (observerOrNext) {\n      _this._context = observerOrNext;\n      _this._tapNext = observerOrNext.next || noop;\n      _this._tapError = observerOrNext.error || noop;\n      _this._tapComplete = observerOrNext.complete || noop;\n    }\n\n    return _this;\n  }\n\n  TapSubscriber.prototype._next = function (value) {\n    try {\n      this._tapNext.call(this._context, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(value);\n  };\n\n  TapSubscriber.prototype._error = function (err) {\n    try {\n      this._tapError.call(this._context, err);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.error(err);\n  };\n\n  TapSubscriber.prototype._complete = function () {\n    try {\n      this._tapComplete.call(this._context);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    return this.destination.complete();\n  };\n\n  return TapSubscriber;\n}(Subscriber);","map":null,"metadata":{},"sourceType":"module"}