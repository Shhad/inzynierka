{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate) {\n  return function (source) {\n    return source.lift(new TakeWhileOperator(predicate));\n  };\n}\n\nvar TakeWhileOperator =\n/*@__PURE__*/\nfunction () {\n  function TakeWhileOperator(predicate) {\n    this.predicate = predicate;\n  }\n\n  TakeWhileOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  };\n\n  return TakeWhileOperator;\n}();\n\nvar TakeWhileSubscriber =\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(TakeWhileSubscriber, _super);\n\n  function TakeWhileSubscriber(destination, predicate) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.index = 0;\n    return _this;\n  }\n\n  TakeWhileSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n    var result;\n\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this.nextOrComplete(value, result);\n  };\n\n  TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n    var destination = this.destination;\n\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  };\n\n  return TakeWhileSubscriber;\n}(Subscriber);","map":null,"metadata":{},"sourceType":"module"}