{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\n\nvar RetryWhenOperator =\n/*@__PURE__*/\nfunction () {\n  function RetryWhenOperator(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  RetryWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  };\n\n  return RetryWhenOperator;\n}();\n\nvar RetryWhenSubscriber =\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(RetryWhenSubscriber, _super);\n\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n\n  RetryWhenSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var errors = this.errors;\n      var retries = this.retries;\n      var retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n\n        if (retries === errorObject) {\n          return _super.prototype.error.call(this, errorObject.e);\n        }\n\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  };\n\n  RetryWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        errors = _a.errors,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n\n    this.retries = null;\n  };\n\n  RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n\n    this._unsubscribeAndRecycle();\n\n    this._unsubscribe = _unsubscribe;\n    this.source.subscribe(this);\n  };\n\n  return RetryWhenSubscriber;\n}(OuterSubscriber);","map":null,"metadata":{},"sourceType":"module"}