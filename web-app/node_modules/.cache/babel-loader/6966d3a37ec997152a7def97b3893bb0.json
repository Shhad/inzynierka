{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\baszak\\\\pwr\\\\magisterka\\\\rozproszone systemy bazodanowe\\\\project\\\\test_inz\\\\inzynierka\\\\web-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\baszak\\\\pwr\\\\magisterka\\\\rozproszone systemy bazodanowe\\\\project\\\\test_inz\\\\inzynierka\\\\web-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addOrderFunction),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addProductToOrderFunction),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteProductFromOrderFunction),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadOrders),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetOrders),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddOrder),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddOrderProduct),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchDeleteOrderProduct),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(orderSaga);\n\nimport { delay } from 'redux-saga';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { SERWER_PROD } from \"../constants/AppConstants\";\n\nvar getUserOrders = function getUserOrders(userid) {\n  try {\n    console.log('getting order user');\n    var response = fetch(\"\".concat(SERWER_PROD, \"/api/order/orders/\").concat(userid), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      if (data.status === 'ok') {\n        console.log(data.data);\n        return data.data;\n      } else {\n        console.log('not good');\n        return false;\n      }\n    }).catch(function (error) {\n      return console.log(\"Error occurred: \".concat(error, \".\"));\n    });\n    return response;\n  } catch (e) {\n    console.log(\"Could not fetch data from \".concat(SERWER_PROD, \".\"));\n    return [];\n  }\n};\n\nvar getProductsOfOrder =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(orderId) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"\".concat(SERWER_PROD, \"/api/product/products/order/\").concat(orderId), {\n              method: 'GET',\n              headers: {\n                'Accept': 'application/json'\n              }\n            }).then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              return data.data;\n            }).catch(function (error) {\n              console.log(\"Error occurred: \".concat(error, \".\"));\n              return false;\n            });\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getProductsOfOrder(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getUserOrdersProducts =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(userid) {\n    var responseData, response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            console.log('getting order user');\n            _context3.next = 4;\n            return fetch(\"\".concat(SERWER_PROD, \"/api/order/orderss/\").concat(userid), {\n              method: 'GET',\n              headers: {\n                'Accept': 'application/json'\n              }\n            }).then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              if (data.status === 'ok') {\n                console.log('orders properly taken');\n                console.log(data.data);\n                responseData = data.data;\n                console.log(responseData);\n                return data.data;\n              } else {\n                console.log(\"Something went wrong with fetching orders\");\n                return false;\n              }\n            }).catch(function (error) {\n              console.log(\"Error occurred: \".concat(error, \".\"));\n              return false;\n            });\n\n          case 4:\n            response = _context3.sent;\n            _context3.next = 7;\n            return response;\n\n          case 7:\n            _context3.next = 9;\n            return Promise.all(responseData.map(\n            /*#__PURE__*/\n            function () {\n              var _ref3 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee2(order) {\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return getProductsOfOrder(order.orderId);\n\n                      case 2:\n                        order.products = _context2.sent;\n\n                      case 3:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, this);\n              }));\n\n              return function (_x3) {\n                return _ref3.apply(this, arguments);\n              };\n            }()));\n\n          case 9:\n            return _context3.abrupt(\"return\", response);\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(\"Could not fetch data from \".concat(SERWER_PROD, \".\"));\n            return _context3.abrupt(\"return\", []);\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this, [[0, 12]]);\n  }));\n\n  return function getUserOrdersProducts(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar addOrderProduct = function addOrderProduct(orderid, productid) {\n  try {\n    console.log('adding order product');\n    console.log(orderid);\n    console.log(productid);\n    var response = fetch(\"\".concat(SERWER_PROD, \"/api/order/add2\"), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: 0,\n        orderId: orderid,\n        productId: productid\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      if (data.status === 'ok') {\n        console.log(data.data);\n        return data.data;\n      } else {\n        console.log('not good');\n        return false;\n      }\n    }).catch(function (error) {\n      return console.log(\"Error occurred: \".concat(error, \".\"));\n    });\n    return response;\n  } catch (e) {\n    console.log(\"Could not fetch data from \".concat(SERWER_PROD, \".\"));\n    return false;\n  }\n};\n\nvar addOrder = function addOrder(orderid, userid, name) {\n  try {\n    console.log('getting filtered products');\n    var response = fetch(\"\".concat(SERWER_PROD, \"/api/order/add\"), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        orderId: 0,\n        userId: userid,\n        name: name\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(data);\n\n      if (data.status === 'ok') {\n        console.log(data.data);\n        return data.data;\n      } else {\n        console.log('not good');\n        return false;\n      }\n    }).catch(function (error) {\n      return console.log(\"Error occurred: \".concat(error, \".\"));\n    });\n    return response;\n  } catch (e) {\n    console.log(\"Could not fetch data from \".concat(SERWER_PROD, \".\"));\n    return false;\n  }\n};\n\nvar deleteProductFromOrder = function deleteProductFromOrder(order, product) {\n  try {\n    console.log('getting filtered products');\n    var response = fetch(\"\".concat(SERWER_PROD, \"/api/order/delete/\").concat(order, \"/\").concat(product), {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      if (data.status === 'ok') {\n        console.log(data.data);\n        return data.data;\n      } else {\n        console.log('not good');\n        return false;\n      }\n    }).catch(function (error) {\n      return console.log(\"Error occurred: \".concat(error, \".\"));\n    });\n    return response;\n  } catch (e) {\n    console.log(\"Could not fetch data from \".concat(SERWER_PROD, \".\"));\n    return false;\n  }\n};\n\nfunction addOrderFunction(action) {\n  return _regeneratorRuntime.wrap(function addOrderFunction$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return addOrder(action.orderId, action.userId, action.name);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: 'GET_ORDERS'\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            type: 'ADD_ORDER_FAILURE',\n            payload: _context4.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked, this, [[0, 7]]);\n}\n\nfunction addProductToOrderFunction(action) {\n  return _regeneratorRuntime.wrap(function addProductToOrderFunction$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return addOrderProduct(action.orderId, action.productId);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: 'GET_ORDERS'\n          });\n\n        case 5:\n          _context5.next = 11;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 11;\n          return put({\n            type: 'ADD_TO_ORDER_FAILURE',\n            payload: _context5.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked2, this, [[0, 7]]);\n}\n\nfunction deleteProductFromOrderFunction(action) {\n  return _regeneratorRuntime.wrap(function deleteProductFromOrderFunction$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return deleteProductFromOrder(action.orderId, action.productId);\n\n        case 3:\n          _context6.next = 9;\n          break;\n\n        case 5:\n          _context6.prev = 5;\n          _context6.t0 = _context6[\"catch\"](0);\n          _context6.next = 9;\n          return put({\n            type: 'DELETE_FROM_ORDER_FAILURE',\n            payload: _context6.t0\n          });\n\n        case 9:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3, this, [[0, 5]]);\n}\n\nfunction loadOrders(action) {\n  var orderList;\n  return _regeneratorRuntime.wrap(function loadOrders$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context7.next = 5;\n          return getUserOrdersProducts(action.userid);\n\n        case 5:\n          orderList = _context7.sent;\n          _context7.next = 8;\n          return put({\n            type: 'GET_ORDERS_SUCCESS',\n            payload: orderList\n          });\n\n        case 8:\n          _context7.next = 14;\n          break;\n\n        case 10:\n          _context7.prev = 10;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 14;\n          return put({\n            type: 'GET_ORDERS_FAILURE',\n            payload: _context7.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked4, this, [[0, 10]]);\n}\n\nfunction watchGetOrders() {\n  return _regeneratorRuntime.wrap(function watchGetOrders$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest('GET_ORDERS', loadOrders);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked5, this);\n}\n\nfunction watchAddOrder() {\n  return _regeneratorRuntime.wrap(function watchAddOrder$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest('ADD_ORDER', addOrderFunction);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked6, this);\n}\n\nfunction watchAddOrderProduct() {\n  return _regeneratorRuntime.wrap(function watchAddOrderProduct$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest('ADD_ORDER_PRODUCT', addProductToOrderFunction);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked7, this);\n}\n\nfunction watchDeleteOrderProduct() {\n  return _regeneratorRuntime.wrap(function watchDeleteOrderProduct$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest('DELETE_ORDER_PRODUCT', deleteProductFromOrderFunction);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked8, this);\n}\n\nexport default function orderSaga() {\n  return _regeneratorRuntime.wrap(function orderSaga$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return [watchGetOrders(), watchAddOrder(), watchAddOrderProduct(), watchDeleteOrderProduct()];\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked9, this);\n}","map":{"version":3,"sources":["C:\\Users\\baszak\\pwr\\magisterka\\rozproszone systemy bazodanowe\\project\\test_inz\\inzynierka\\web-app\\src\\sagas\\orderSaga.js"],"names":["addOrderFunction","addProductToOrderFunction","deleteProductFromOrderFunction","loadOrders","watchGetOrders","watchAddOrder","watchAddOrderProduct","watchDeleteOrderProduct","orderSaga","delay","put","takeLatest","SERWER_PROD","getUserOrders","userid","console","log","response","fetch","method","headers","then","json","data","status","catch","error","e","getProductsOfOrder","orderId","getUserOrdersProducts","responseData","Promise","all","map","order","products","addOrderProduct","orderid","productid","body","JSON","stringify","id","productId","addOrder","name","userId","deleteProductFromOrder","product","action","type","payload","orderList"],"mappings":"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","sourcesContent":["import {\r\n    delay\r\n} from 'redux-saga';\r\n\r\nimport {\r\n    put,\r\n    takeLatest\r\n} from 'redux-saga/effects';\r\nimport {SERWER_PROD} from \"../constants/AppConstants\";\r\n\r\nconst getUserOrders = (userid) => {\r\n    try {\r\n        console.log('getting order user');\r\n        const response = fetch(`${SERWER_PROD}/api/order/orders/${userid}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => response.json())\r\n            .then(data => {\r\n                if(data.status === 'ok') {\r\n                    console.log(data.data);\r\n                    return data.data;\r\n                } else {\r\n                    console.log('not good');\r\n                    return false;\r\n                }\r\n            })\r\n            .catch(error => console.log(`Error occurred: ${error}.`));\r\n        return response;\r\n    } catch(e) {\r\n        console.log(`Could not fetch data from ${SERWER_PROD}.`);\r\n        return [];\r\n    }\r\n};\r\n\r\nconst getProductsOfOrder = async(orderId) => {\r\n    const response = await fetch(`${SERWER_PROD}/api/product/products/order/${orderId}`,{\r\n        method: 'GET',\r\n        headers: {\r\n            'Accept': 'application/json'\r\n        }\r\n    }).then(response => response.json())\r\n        .then(data => {\r\n            return data.data;\r\n        })\r\n        .catch(error => {\r\n            console.log(`Error occurred: ${error}.`);\r\n            return false;\r\n        });\r\n    return response;\r\n};\r\n\r\nconst getUserOrdersProducts = async(userid) => {\r\n    try {\r\n        console.log('getting order user');\r\n        let responseData;\r\n        const response = await fetch(`${SERWER_PROD}/api/order/orderss/${userid}`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        }).then(response => response.json())\r\n            .then(data => {\r\n                if(data.status === 'ok') {\r\n                    console.log('orders properly taken');\r\n                    console.log(data.data);\r\n                    responseData = data.data;\r\n                    console.log(responseData);\r\n                    return data.data;\r\n                } else {\r\n                    console.log(`Something went wrong with fetching orders`);\r\n                    return false;\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(`Error occurred: ${error}.`);\r\n                return false;\r\n            });\r\n        await response;\r\n\r\n        await Promise.all(responseData.map(async order => {\r\n            order.products = await getProductsOfOrder(order.orderId);\r\n        }));\r\n\r\n        return response;\r\n    } catch(e) {\r\n        console.log(`Could not fetch data from ${SERWER_PROD}.`);\r\n        return [];\r\n    }\r\n};\r\n\r\nconst addOrderProduct = (orderid, productid) => {\r\n    try {\r\n        console.log('adding order product');\r\n        console.log(orderid);\r\n        console.log(productid);\r\n        const response = fetch(`${SERWER_PROD}/api/order/add2`,{\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: 0,\r\n                orderId: orderid,\r\n                productId: productid\r\n            })\r\n        }).then(response => response.json())\r\n            .then(data => {\r\n                if(data.status === 'ok') {\r\n                    console.log(data.data);\r\n                    return data.data;\r\n                } else {\r\n                    console.log('not good');\r\n                    return false;\r\n                }\r\n            })\r\n            .catch(error => console.log(`Error occurred: ${error}.`));\r\n        return response;\r\n    } catch(e) {\r\n        console.log(`Could not fetch data from ${SERWER_PROD}.`);\r\n        return false;\r\n    }\r\n};\r\n\r\nconst addOrder = (orderid, userid, name) => {\r\n    try {\r\n        console.log('getting filtered products');\r\n        const response = fetch(`${SERWER_PROD}/api/order/add`,{\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                orderId: 0,\r\n                userId: userid,\r\n                name: name\r\n            })\r\n        }).then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                if(data.status === 'ok') {\r\n                    console.log(data.data);\r\n                    return data.data;\r\n                } else {\r\n                    console.log('not good');\r\n                    return false;\r\n                }\r\n            })\r\n            .catch(error => console.log(`Error occurred: ${error}.`));\r\n        return response;\r\n    } catch(e) {\r\n        console.log(`Could not fetch data from ${SERWER_PROD}.`);\r\n        return false;\r\n    }\r\n};\r\n\r\nconst deleteProductFromOrder = (order, product) => {\r\n    try {\r\n        console.log('getting filtered products');\r\n        const response = fetch(`${SERWER_PROD}/api/order/delete/${order}/${product}`,{\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => response.json())\r\n            .then(data => {\r\n                if(data.status === 'ok') {\r\n                    console.log(data.data);\r\n                    return data.data;\r\n                } else {\r\n                    console.log('not good');\r\n                    return false;\r\n                }\r\n            })\r\n            .catch(error => console.log(`Error occurred: ${error}.`));\r\n        return response;\r\n    } catch(e) {\r\n        console.log(`Could not fetch data from ${SERWER_PROD}.`);\r\n        return false;\r\n    }\r\n};\r\n\r\nfunction* addOrderFunction (action) {\r\n    try {\r\n        yield addOrder(action.orderId, action.userId, action.name);\r\n        yield put({ type: 'GET_ORDERS'});\r\n    } catch (e) {\r\n        yield put({ type: 'ADD_ORDER_FAILURE', payload: e});\r\n    }\r\n}\r\n\r\nfunction* addProductToOrderFunction (action) {\r\n    try {\r\n        yield addOrderProduct(action.orderId, action.productId);\r\n        yield put({ type: 'GET_ORDERS'});\r\n    } catch (e) {\r\n        yield put({ type: 'ADD_TO_ORDER_FAILURE', payload: e});\r\n    }\r\n}\r\n\r\nfunction* deleteProductFromOrderFunction (action) {\r\n    try {\r\n        yield deleteProductFromOrder(action.orderId, action.productId);\r\n    } catch (e) {\r\n        yield put({ type: 'DELETE_FROM_ORDER_FAILURE', payload: e});\r\n    }\r\n}\r\n\r\nfunction* loadOrders (action) {\r\n    try {\r\n        yield delay(1000);\r\n        const orderList = yield getUserOrdersProducts(action.userid);\r\n        yield put({ type: 'GET_ORDERS_SUCCESS', payload: orderList});\r\n    } catch (e) {\r\n        yield put({type: 'GET_ORDERS_FAILURE', payload: e});\r\n    }\r\n}\r\n\r\nfunction* watchGetOrders() {\r\n    yield takeLatest('GET_ORDERS', loadOrders);\r\n}\r\n\r\nfunction* watchAddOrder() {\r\n    yield takeLatest('ADD_ORDER', addOrderFunction);\r\n}\r\n\r\nfunction* watchAddOrderProduct() {\r\n    yield takeLatest('ADD_ORDER_PRODUCT', addProductToOrderFunction);\r\n}\r\n\r\nfunction* watchDeleteOrderProduct() {\r\n    yield takeLatest('DELETE_ORDER_PRODUCT', deleteProductFromOrderFunction);\r\n}\r\n\r\nexport default function* orderSaga() {\r\n    yield [\r\n        watchGetOrders(),\r\n        watchAddOrder(),\r\n        watchAddOrderProduct(),\r\n        watchDeleteOrderProduct()\r\n    ]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}