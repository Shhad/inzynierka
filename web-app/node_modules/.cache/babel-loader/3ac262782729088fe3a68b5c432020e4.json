{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_.._util_root,_.._util_tryCatch,_.._util_errorObject,_.._Observable,_.._Subscriber,_.._operators_map PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { map } from '../../operators/map';\n\nfunction getCORSRequest() {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest() {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    var progId = void 0;\n\n    try {\n      var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n\n      for (var i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {}\n      }\n\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport function ajaxGet(url, headers) {\n  if (headers === void 0) {\n    headers = null;\n  }\n\n  return new AjaxObservable({\n    method: 'GET',\n    url: url,\n    headers: headers\n  });\n}\nexport function ajaxPost(url, body, headers) {\n  return new AjaxObservable({\n    method: 'POST',\n    url: url,\n    body: body,\n    headers: headers\n  });\n}\nexport function ajaxDelete(url, headers) {\n  return new AjaxObservable({\n    method: 'DELETE',\n    url: url,\n    headers: headers\n  });\n}\nexport function ajaxPut(url, body, headers) {\n  return new AjaxObservable({\n    method: 'PUT',\n    url: url,\n    body: body,\n    headers: headers\n  });\n}\nexport function ajaxPatch(url, body, headers) {\n  return new AjaxObservable({\n    method: 'PATCH',\n    url: url,\n    body: body,\n    headers: headers\n  });\n}\nvar mapResponse =\n/*@__PURE__*/\nmap(function (x, index) {\n  return x.response;\n});\nexport function ajaxGetJSON(url, headers) {\n  return mapResponse(new AjaxObservable({\n    method: 'GET',\n    url: url,\n    responseType: 'json',\n    headers: headers\n  }));\n}\n\nvar AjaxObservable =\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(AjaxObservable, _super);\n\n  function AjaxObservable(urlOrRequest) {\n    var _this = _super.call(this) || this;\n\n    var request = {\n      async: true,\n      createXHR: function createXHR() {\n        return this.crossDomain ? getCORSRequest() : getXMLHttpRequest();\n      },\n      crossDomain: true,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (var prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    _this.request = request;\n    return _this;\n  }\n\n  AjaxObservable.prototype._subscribe = function (subscriber) {\n    return new AjaxSubscriber(subscriber, this.request);\n  };\n\n  AjaxObservable.create = function () {\n    var create = function create(urlOrRequest) {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n    return create;\n  }();\n\n  return AjaxObservable;\n}(Observable);\n\nexport { AjaxObservable };\n\nvar AjaxSubscriber =\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(AjaxSubscriber, _super);\n\n  function AjaxSubscriber(destination, request) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.request = request;\n    _this.done = false;\n    var headers = request.headers = request.headers || {};\n\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    request.body = _this.serializeBody(request.body, request.headers['Content-Type']);\n\n    _this.send();\n\n    return _this;\n  }\n\n  AjaxSubscriber.prototype.next = function (e) {\n    this.done = true;\n\n    var _a = this,\n        xhr = _a.xhr,\n        request = _a.request,\n        destination = _a.destination;\n\n    var response = new AjaxResponse(e, xhr, request);\n\n    if (response.response === errorObject) {\n      destination.error(errorObject.e);\n    } else {\n      destination.next(response);\n    }\n  };\n\n  AjaxSubscriber.prototype.send = function () {\n    var _a = this,\n        request = _a.request,\n        _b = _a.request,\n        user = _b.user,\n        method = _b.method,\n        url = _b.url,\n        async = _b.async,\n        password = _b.password,\n        headers = _b.headers,\n        body = _b.body;\n\n    var createXHR = request.createXHR;\n    var xhr = tryCatch(createXHR).call(request);\n\n    if (xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n      this.setupEvents(xhr, request);\n      var result = void 0;\n\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      this.setHeaders(xhr, headers);\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  };\n\n  AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      var splitIndex = contentType.indexOf(';');\n\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(function (key) {\n          return encodeURIComponent(key) + \"=\" + encodeURIComponent(body[key]);\n        }).join('&');\n\n      case 'application/json':\n        return JSON.stringify(body);\n\n      default:\n        return body;\n    }\n  };\n\n  AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n    for (var key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  };\n\n  AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n    var progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(e) {\n      var _a = xhrTimeout,\n          subscriber = _a.subscriber,\n          progressSubscriber = _a.progressSubscriber,\n          request = _a.request;\n\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n\n      var ajaxTimeoutError = new AjaxTimeoutError(this, request);\n\n      if (ajaxTimeoutError.response === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.error(ajaxTimeoutError);\n      }\n    }\n\n    xhr.ontimeout = xhrTimeout;\n    xhrTimeout.request = request;\n    xhrTimeout.subscriber = this;\n    xhrTimeout.progressSubscriber = progressSubscriber;\n\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        var _xhrProgress_;\n\n        _xhrProgress_ = function xhrProgress_1(e) {\n          var progressSubscriber = _xhrProgress_.progressSubscriber;\n          progressSubscriber.next(e);\n        };\n\n        if (root.XDomainRequest) {\n          xhr.onprogress = _xhrProgress_;\n        } else {\n          xhr.upload.onprogress = _xhrProgress_;\n        }\n\n        _xhrProgress_.progressSubscriber = progressSubscriber;\n      }\n\n      var _xhrError_;\n\n      _xhrError_ = function xhrError_1(e) {\n        var _a = _xhrError_,\n            progressSubscriber = _a.progressSubscriber,\n            subscriber = _a.subscriber,\n            request = _a.request;\n\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n\n        var ajaxError = new AjaxError('ajax error', this, request);\n\n        if (ajaxError.response === errorObject) {\n          subscriber.error(errorObject.e);\n        } else {\n          subscriber.error(ajaxError);\n        }\n      };\n\n      xhr.onerror = _xhrError_;\n      _xhrError_.request = request;\n      _xhrError_.subscriber = this;\n      _xhrError_.progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(e) {\n      return;\n    }\n\n    xhr.onreadystatechange = xhrReadyStateChange;\n    xhrReadyStateChange.subscriber = this;\n    xhrReadyStateChange.progressSubscriber = progressSubscriber;\n    xhrReadyStateChange.request = request;\n\n    function xhrLoad(e) {\n      var _a = xhrLoad,\n          subscriber = _a.subscriber,\n          progressSubscriber = _a.progressSubscriber,\n          request = _a.request;\n\n      if (this.readyState === 4) {\n        var status_1 = this.status === 1223 ? 204 : this.status;\n        var response = this.responseType === 'text' ? this.response || this.responseText : this.response;\n\n        if (status_1 === 0) {\n          status_1 = response ? 200 : 0;\n        }\n\n        if (status_1 < 400) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n\n          var ajaxError = new AjaxError('ajax error ' + status_1, this, request);\n\n          if (ajaxError.response === errorObject) {\n            subscriber.error(errorObject.e);\n          } else {\n            subscriber.error(ajaxError);\n          }\n        }\n      }\n    }\n\n    xhr.onload = xhrLoad;\n    xhrLoad.subscriber = this;\n    xhrLoad.progressSubscriber = progressSubscriber;\n    xhrLoad.request = request;\n  };\n\n  AjaxSubscriber.prototype.unsubscribe = function () {\n    var _a = this,\n        done = _a.done,\n        xhr = _a.xhr;\n\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n\n    _super.prototype.unsubscribe.call(this);\n  };\n\n  return AjaxSubscriber;\n}(Subscriber);\n\nexport { AjaxSubscriber };\n\nvar AjaxResponse =\n/*@__PURE__*/\nfunction () {\n  function AjaxResponse(originalEvent, xhr, request) {\n    this.originalEvent = originalEvent;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n\n  return AjaxResponse;\n}();\n\nexport { AjaxResponse };\n\nfunction AjaxErrorImpl(message, xhr, request) {\n  Error.call(this);\n  this.message = message;\n  this.name = 'AjaxError';\n  this.xhr = xhr;\n  this.request = request;\n  this.status = xhr.status;\n  this.responseType = xhr.responseType || request.responseType;\n  this.response = parseXhrResponse(this.responseType, xhr);\n  return this;\n}\n\nAjaxErrorImpl.prototype =\n/*@__PURE__*/\nObject.create(Error.prototype);\nexport var AjaxError = AjaxErrorImpl;\n\nfunction parseJson(xhr) {\n  if ('response' in xhr) {\n    return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n  } else {\n    return JSON.parse(xhr.responseText || 'null');\n  }\n}\n\nfunction parseXhrResponse(responseType, xhr) {\n  switch (responseType) {\n    case 'json':\n      return tryCatch(parseJson)(xhr);\n\n    case 'xml':\n      return xhr.responseXML;\n\n    case 'text':\n    default:\n      return 'response' in xhr ? xhr.response : xhr.responseText;\n  }\n}\n\nfunction AjaxTimeoutErrorImpl(xhr, request) {\n  AjaxError.call(this, 'ajax timeout', xhr, request);\n  this.name = 'AjaxTimeoutError';\n  return this;\n}\n\nexport var AjaxTimeoutError = AjaxTimeoutErrorImpl;","map":null,"metadata":{},"sourceType":"module"}