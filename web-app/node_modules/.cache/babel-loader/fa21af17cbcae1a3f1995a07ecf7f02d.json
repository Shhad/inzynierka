{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\baszak\\\\projects\\\\inzynierka\\\\web-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadCategories),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetCategories),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(categorySaga);\n\nimport { delay } from 'redux-saga';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { SERWER_PROD } from \"../constants/AppConstants\";\n\nvar getCategories = function getCategories() {\n  try {\n    return [{\n      categoryId: 1,\n      name: \"nabial\",\n      description: \"\"\n    }, {\n      categoryId: \"lol\",\n      name: \"lol\",\n      description: \"\"\n    }];\n    /*const response = fetch(`${SERWER_PROD}/api/category/categories`,{\r\n        method: 'GET',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }).then(response => response.json())\r\n        .then(data => {\r\n            if(data.status === 'ok') {\r\n                console.log(data.data);\r\n                return data.data;\r\n            } else {\r\n                console.log('not good');\r\n                return false;\r\n            }\r\n        })\r\n        .catch(error => console.log(`Error occurred: ${error}.`));\r\n    return response;*/\n  } catch (e) {\n    console.log(\"Could not fetch data from \".concat(SERWER_PROD, \".\"));\n    return [];\n  }\n\n  console.log('fetching with get categories');\n};\n\nfunction loadCategories() {\n  var categoriesList;\n  return _regeneratorRuntime.wrap(function loadCategories$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return getCategories();\n\n        case 3:\n          categoriesList = _context.sent;\n          _context.next = 6;\n          return put({\n            type: 'GET_CATEGORIES_SUCCESS',\n            payload: categoriesList\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: 'GET_CATEGORIES_FAILURE',\n            payload: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 8]]);\n}\n\nfunction watchGetCategories() {\n  return _regeneratorRuntime.wrap(function watchGetCategories$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('GET_CATEGORIES', loadCategories);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nexport default function categorySaga() {\n  return _regeneratorRuntime.wrap(function categorySaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return [watchGetCategories()];\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}","map":{"version":3,"sources":["C:\\Users\\baszak\\projects\\inzynierka\\web-app\\src\\sagas\\categorySaga.js"],"names":["loadCategories","watchGetCategories","categorySaga","delay","put","takeLatest","SERWER_PROD","getCategories","categoryId","name","description","e","console","log","categoriesList","type","payload"],"mappings":";;;;yBA2CUA,c;;;yBASAC,kB;;;yBAIeC,Y;;AAxDzB,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,SAAQC,WAAR,QAA0B,2BAA1B;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxB,MAAI;AACA,WAAO,CACH;AACIC,MAAAA,UAAU,EAAE,CADhB;AAEIC,MAAAA,IAAI,EAAE,QAFV;AAGIC,MAAAA,WAAW,EAAE;AAHjB,KADG,EAMH;AACIF,MAAAA,UAAU,EAAE,KADhB;AAEIC,MAAAA,IAAI,EAAE,KAFV;AAGIC,MAAAA,WAAW,EAAE;AAHjB,KANG,CAAP;AAYA;;;;;;;;;;;;;;;;;;AAkBH,GA/BD,CA+BE,OAAMC,CAAN,EAAS;AACPC,IAAAA,OAAO,CAACC,GAAR,qCAAyCP,WAAzC;AACA,WAAO,EAAP;AACH;;AACDM,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,CArCD;;AAuCA,SAAUb,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE+B,iBAAMO,aAAa,EAAnB;;AAF/B;AAEcO,UAAAA,cAFd;AAAA;AAGQ,iBAAMV,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAE,wBAAR;AAAkCC,YAAAA,OAAO,EAAEF;AAA3C,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAMV,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAE,wBAAR;AAAkCC,YAAAA,OAAO;AAAzC,WAAD,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAUf,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAAC,gBAAD,EAAmBL,cAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAM,CACFD,kBAAkB,EADhB,CAAN;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { delay } from 'redux-saga';\r\nimport { put, takeLatest } from 'redux-saga/effects';\r\nimport {SERWER_PROD} from \"../constants/AppConstants\";\r\n\r\nconst getCategories = () => {\r\n    try {\r\n        return [\r\n            {\r\n                categoryId: 1,\r\n                name: \"nabial\",\r\n                description: \"\"\r\n            },\r\n            {\r\n                categoryId: \"lol\",\r\n                name: \"lol\",\r\n                description: \"\"\r\n            }\r\n        ];\r\n        /*const response = fetch(`${SERWER_PROD}/api/category/categories`,{\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => response.json())\r\n            .then(data => {\r\n                if(data.status === 'ok') {\r\n                    console.log(data.data);\r\n                    return data.data;\r\n                } else {\r\n                    console.log('not good');\r\n                    return false;\r\n                }\r\n            })\r\n            .catch(error => console.log(`Error occurred: ${error}.`));\r\n        return response;*/\r\n    } catch(e) {\r\n        console.log(`Could not fetch data from ${SERWER_PROD}.`);\r\n        return [];\r\n    }\r\n    console.log('fetching with get categories');\r\n};\r\n\r\nfunction* loadCategories () {\r\n    try {\r\n        const categoriesList = yield getCategories();\r\n        yield put({ type: 'GET_CATEGORIES_SUCCESS', payload: categoriesList});\r\n    } catch (e) {\r\n        yield put({ type: 'GET_CATEGORIES_FAILURE', payload: e});\r\n    }\r\n}\r\n\r\nfunction* watchGetCategories() {\r\n    yield takeLatest('GET_CATEGORIES', loadCategories);\r\n}\r\n\r\nexport default function* categorySaga() {\r\n    yield [\r\n        watchGetCategories()\r\n    ]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}