{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar operators_1 = require(\"rxjs/operators\");\n/**\r\n * Emits the values emitted by the source Observable until a `notifier`\r\n * Observable emits a value.\r\n *\r\n * <span class=\"informal\">Lets values pass until a second Observable,\r\n * `notifier`, emits a value. Then, it completes.</span>\r\n *\r\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\r\n *\r\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\r\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\r\n * emits a value, the output Observable stops mirroring the source Observable\r\n * and completes. If the `notifier` doesn't emit any value and completes\r\n * then `takeUntil` will pass all values.\r\n *\r\n * @example <caption>Tick every second until the first click happens</caption>\r\n * var interval = Rx.Observable.interval(1000);\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = interval.takeUntil(clicks);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link take}\r\n * @see {@link takeLast}\r\n * @see {@link takeWhile}\r\n * @see {@link skip}\r\n *\r\n * @param {Observable} notifier The Observable whose first emitted value will\r\n * cause the output Observable of `takeUntil` to stop emitting values from the\r\n * source Observable.\r\n * @return {Observable<T>} An Observable that emits the values from the source\r\n * Observable until such time as `notifier` emits its first value.\r\n * @method takeUntil\r\n * @owner Observable\r\n */\n\n\nfunction takeUntil(notifier) {\n  return operators_1.takeUntil(notifier)(this);\n}\n\nexports.takeUntil = takeUntil;","map":null,"metadata":{},"sourceType":"script"}