{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\baszak\\\\projects\\\\inzynierka\\\\web-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadAllShops),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetShops),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(shopSaga);\n\nimport { put, select, takeLatest } from 'redux-saga/effects';\nimport { SERWER_PROD } from \"../constants/AppConstants\";\n\nvar getAllShopsFromServer = function getAllShopsFromServer() {\n  try {\n    return [{\n      shopId: 1,\n      name: \"lol\",\n      localization: '',\n      street: \"\",\n      city: \"\",\n      number: \"\",\n      country: \"\",\n      telnumber: \"\",\n      site: \"\"\n    }];\n    /*console.log('fetching with get shops');\r\n    const response = fetch(`${SERWER_PROD}/api/shop/shops`,{\r\n        method: 'GET',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }).then(response => response.json())\r\n        .then(data => {\r\n            if(data.status === 'ok') {\r\n                console.log(data.data);\r\n                return data.data;\r\n            } else {\r\n                console.log('not good');\r\n                return false;\r\n            }\r\n        })\r\n        .catch(error => console.log(`Error occurred: ${error}.`));\r\n    return response;*/\n  } catch (e) {\n    console.log(\"Could not fetch data from \".concat(SERWER_PROD, \".\"));\n    return [];\n  }\n};\n\nfunction loadAllShops() {\n  var shopList;\n  return _regeneratorRuntime.wrap(function loadAllShops$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return getAllShopsFromServer();\n\n        case 3:\n          shopList = _context.sent;\n          _context.next = 6;\n          return put({\n            type: 'GET_SHOPS_SUCCESS',\n            payload: shopList\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: 'GET_SHOPS_FAILURE',\n            payload: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 8]]);\n}\n\nfunction watchGetShops() {\n  return _regeneratorRuntime.wrap(function watchGetShops$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('GET_SHOPS', loadAllShops);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nexport default function shopSaga() {\n  return _regeneratorRuntime.wrap(function shopSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return [watchGetShops()];\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}","map":{"version":3,"sources":["C:\\Users\\baszak\\projects\\inzynierka\\web-app\\src\\sagas\\shopSaga.js"],"names":["loadAllShops","watchGetShops","shopSaga","put","select","takeLatest","SERWER_PROD","getAllShopsFromServer","shopId","name","localization","street","city","number","country","telnumber","site","e","console","log","shopList","type","payload"],"mappings":";;;;yBAgDUA,Y;;;yBASAC,a;;;yBAIeC,Q;;AA7DzB,SACIC,GADJ,EAEIC,MAFJ,EAGIC,UAHJ,QAIO,oBAJP;AAKA,SAAQC,WAAR,QAA0B,2BAA1B;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAC5B,MAAI;AACA,WAAO,CACH;AACIC,MAAAA,MAAM,EAAE,CADZ;AAEIC,MAAAA,IAAI,EAAE,KAFV;AAGIC,MAAAA,YAAY,EAAE,EAHlB;AAIIC,MAAAA,MAAM,EAAE,EAJZ;AAKIC,MAAAA,IAAI,EAAE,EALV;AAMIC,MAAAA,MAAM,EAAE,EANZ;AAOIC,MAAAA,OAAO,EAAE,EAPb;AAQIC,MAAAA,SAAS,EAAE,EARf;AASIC,MAAAA,IAAI,EAAE;AATV,KADG,CAAP;AAaA;;;;;;;;;;;;;;;;;;;AAmBH,GAjCD,CAiCE,OAAMC,CAAN,EAAS;AACPC,IAAAA,OAAO,CAACC,GAAR,qCAAyCb,WAAzC;AAEA,WAAO,EAAP;AACH;AACR,CAvCD;;AAyCA,SAAUN,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEyB,iBAAMO,qBAAqB,EAA3B;;AAFzB;AAEca,UAAAA,QAFd;AAAA;AAGQ,iBAAMjB,GAAG,CAAC;AAAEkB,YAAAA,IAAI,EAAE,mBAAR;AAA6BC,YAAAA,OAAO,EAAEF;AAAtC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAMjB,GAAG,CAAC;AAACkB,YAAAA,IAAI,EAAE,mBAAP;AAA4BC,YAAAA,OAAO;AAAnC,WAAD,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAUrB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAAC,WAAD,EAAcL,YAAd,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAM,CACFD,aAAa,EADX,CAAN;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\r\n    put,\r\n    select,\r\n    takeLatest\r\n} from 'redux-saga/effects';\r\nimport {SERWER_PROD} from \"../constants/AppConstants\";\r\n\r\nconst getAllShopsFromServer = () => {\r\n        try {\r\n            return [\r\n                {\r\n                    shopId: 1,\r\n                    name: \"lol\",\r\n                    localization: '',\r\n                    street: \"\",\r\n                    city: \"\",\r\n                    number: \"\",\r\n                    country: \"\",\r\n                    telnumber: \"\",\r\n                    site: \"\"\r\n                }\r\n            ]\r\n            /*console.log('fetching with get shops');\r\n            const response = fetch(`${SERWER_PROD}/api/shop/shops`,{\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then(response => response.json())\r\n                .then(data => {\r\n                    if(data.status === 'ok') {\r\n                        console.log(data.data);\r\n                        return data.data;\r\n                    } else {\r\n                        console.log('not good');\r\n                        return false;\r\n                    }\r\n                })\r\n                .catch(error => console.log(`Error occurred: ${error}.`));\r\n            return response;*/\r\n        } catch(e) {\r\n            console.log(`Could not fetch data from ${SERWER_PROD}.`);\r\n\r\n            return [];\r\n        }\r\n};\r\n\r\nfunction* loadAllShops () {\r\n    try {\r\n        const shopList = yield getAllShopsFromServer();\r\n        yield put({ type: 'GET_SHOPS_SUCCESS', payload: shopList});\r\n    } catch (e) {\r\n        yield put({type: 'GET_SHOPS_FAILURE', payload: e});\r\n    }\r\n}\r\n\r\nfunction* watchGetShops() {\r\n    yield takeLatest('GET_SHOPS', loadAllShops);\r\n}\r\n\r\nexport default function* shopSaga() {\r\n    yield [\r\n        watchGetShops()\r\n    ]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}