{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar operators_1 = require(\"rxjs/operators\");\n/**\r\n * Compares all values of two observables in sequence using an optional comparor function\r\n * and returns an observable of a single boolean value representing whether or not the two sequences\r\n * are equal.\r\n *\r\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\r\n *\r\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\r\n *\r\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\r\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\r\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\r\n * observables completes, the operator will wait for the other observable to complete; If the other\r\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\r\n * completes or emits after the other complets, the returned observable will never complete.\r\n *\r\n * @example <caption>figure out if the Konami code matches</caption>\r\n * var code = Rx.Observable.from([\r\n *  \"ArrowUp\",\r\n *  \"ArrowUp\",\r\n *  \"ArrowDown\",\r\n *  \"ArrowDown\",\r\n *  \"ArrowLeft\",\r\n *  \"ArrowRight\",\r\n *  \"ArrowLeft\",\r\n *  \"ArrowRight\",\r\n *  \"KeyB\",\r\n *  \"KeyA\",\r\n *  \"Enter\" // no start key, clearly.\r\n * ]);\r\n *\r\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\r\n *  .map(e => e.code);\r\n * var matches = keys.bufferCount(11, 1)\r\n *  .mergeMap(\r\n *    last11 =>\r\n *      Rx.Observable.from(last11)\r\n *        .sequenceEqual(code)\r\n *   );\r\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\r\n *\r\n * @see {@link combineLatest}\r\n * @see {@link zip}\r\n * @see {@link withLatestFrom}\r\n *\r\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\r\n * @param {function} [comparor] An optional function to compare each value pair\r\n * @return {Observable} An Observable of a single boolean value representing whether or not\r\n * the values emitted by both observables were equal in sequence.\r\n * @method sequenceEqual\r\n * @owner Observable\r\n */\n\n\nfunction sequenceEqual(compareTo, comparor) {\n  return operators_1.sequenceEqual(compareTo, comparor)(this);\n}\n\nexports.sequenceEqual = sequenceEqual;","map":null,"metadata":{},"sourceType":"script"}